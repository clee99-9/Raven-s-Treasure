// CREATE
// CREATE EVENT FOR (OBJECT PLAYER)
xspd = 2;
yspd = 2;

gary_spd = 2.5; // Movement Speed

is_flying = false; // State to check if player is flying
normal_sprite_right = spr_Gary_normal_right; // Normal spriteflying_sprite = spr_Gary_flying; // Default flying sprite
normal_sprite_left = spr_Gary_1


// Directional sprites for normal movement
sprite_left = spr_Gary_left;
sprite_right = spr_Gary_right;
sprite_up = spr_Gary_up;
sprite_down = spr_Gary_down;

// Directional sprites for flying
flying_sprite_left = spr_Gary_flying_left;
flying_sprite_right = spr_Gary_flying_right;
flying_sprite_up = spr_Gary_flying_up;
flying_sprite_down = spr_Gary_flying_down;

// Set the initial sprite
sprite_index = normal_sprite_right;  // Start with the normal sprite

// Set depth to ensure player is above the wall
depth = -1; // Ensure this is lower than the wall's depth

// STEP
// Movement
var right_key = keyboard_check(ord("D")) || keyboard_check(vk_right); 
var left_key = keyboard_check(ord("A")) || keyboard_check(vk_left);
var up_key = keyboard_check(ord("W")) || keyboard_check(vk_up); 
var down_key = keyboard_check(ord("S")) || keyboard_check(vk_down);


// Flying 
if (keyboard_check_pressed(vk_space)) {
    is_flying = !is_flying; // Toggle flying state
	sprite_index = flying_sprite_right;
	image_speed = 0;
}

// Speed calculation
xspd = (right_key - left_key) * gary_spd;
yspd = (down_key - up_key) * gary_spd;

// Determine if the player is moving
var is_moving = (xspd != 2 || yspd != 2);

if (is_moving) {
	// Use normal directional sprites
        if (xspd > 0) {
            sprite_index = sprite_right; // Moving right
			image_speed = 1;
        } else if (xspd < 0) {
            sprite_index = sprite_left; // Moving left
			image_speed = 1;
        } else if (yspd > 0) {
            sprite_index = sprite_down; // Moving down
			image_speed = 1;
        } else if (yspd < 0) {
            sprite_index = sprite_up; // Moving up
			image_speed = 1;
        }
    }
    if (is_flying) {
        // Use flying directional sprites
        if (xspd > 0) {
            sprite_index = flying_sprite_right; // Flying right
			image_speed = 2;
        } else if (xspd < 0) {
            sprite_index = flying_sprite_left; // Flying left
			image_speed = 2;
        } else if (yspd > 0) {
            sprite_index = flying_sprite_down; // Flying down
			image_speed = 2;
        } else if (yspd < 0) {
            sprite_index = flying_sprite_up; // Flying up
			image_speed = 2;
}
}

if keyboard_check(vk_nokey){
	if (xspd == 0){
	sprite_index = normal_sprite_right
	}else{
	sprite_index = normal_sprite_left
		}
	if (is_flying){
		sprite_index = flying_sprite_right
	}
}
	

// Collisions

if (is_moving) {
	 if (place_meeting(x + xspd, y, obj_tall)) { 
        xspd = 0; // Stop movement on x collision
    }
    if (place_meeting(x, y + yspd, obj_tall)) {
        yspd = 0; // Stop movement on y collision
    }
}

if (!is_flying) {
    if (place_meeting(x + xspd, y, obj_short)) { 
        xspd = 0; // Stop movement on x collision
    }
    if (place_meeting(x, y + yspd, obj_short)) {
        yspd = 0; // Stop movement on y collision
    }
    // Update position if not flying
    x += xspd;
    y += yspd;
} else {
    // If flying, move freely without collision checks
    x += xspd; // Allow horizontal movement
    y += yspd; // Allow vertical movement
}
