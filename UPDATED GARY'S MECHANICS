// CREATE EVENT FOR (OBJECT PLAYER)
xspd = 0;
yspd = 0;

move_spd = 2; // Movement Speed

is_flying = false; // State to check if player is flying
normal_sprite = SPR_PLAYER; // Normal sprite
flying_sprite = SPR_PLAYER_FLYING; // Default flying sprite

// Directional sprites for normal movement
sprite_left = SPR_PLAYER_LEFT;
sprite_right = SPR_PLAYER_RIGHT;
sprite_up = SPR_PLAYER_UP;
sprite_down = SPR_PLAYER_DOWN;

// Directional sprites for flying
flying_sprite_left = SPR_PLAYER_FLYING_LEFT;
flying_sprite_right = SPR_PLAYER_FLYING_RIGHT;
flying_sprite_up = SPR_PLAYER_FLYING_UP;
flying_sprite_down = SPR_PLAYER_FLYING_DOWN;

// Set the initial sprite
sprite_index = normal_sprite;  // Start with the normal sprite

// Set depth to ensure player is above the wall
depth = -1; // Ensure this is lower than the wall's depth




// STEP EVENT

// Movement
right_key = keyboard_check(ord("D")) || keyboard_check(vk_right); 
left_key = keyboard_check(ord("A")) || keyboard_check(vk_left);
up_key = keyboard_check(ord("W")) || keyboard_check(vk_up); 
down_key = keyboard_check(ord("S")) || keyboard_check(vk_down);

// Flying 
if (keyboard_check_pressed(vk_space)) {
    is_flying = !is_flying; // Toggle flying state
}

// Speed calculation
xspd = (right_key - left_key) * move_spd;
yspd = (down_key - up_key) * move_spd;

// Determine if the player is moving
var is_moving = (xspd != 0 || yspd != 0);

if (is_moving) {
    if (is_flying) {
        // Use flying directional sprites
        if (xspd > 0) {
            sprite_index = flying_sprite_right; // Flying right
        } else if (xspd < 0) {
            sprite_index = flying_sprite_left; // Flying left
        } else if (yspd > 0) {
            sprite_index = flying_sprite_down; // Flying down
        } else if (yspd < 0) {
            sprite_index = flying_sprite_up; // Flying up
        }
    } else {
        // Use normal directional sprites
        if (xspd > 0) {
            sprite_index = sprite_right; // Moving right
        } else if (xspd < 0) {
            sprite_index = sprite_left; // Moving left
        } else if (yspd > 0) {
            sprite_index = sprite_down; // Moving down
        } else if (yspd < 0) {
            sprite_index = sprite_up; // Moving up
        }
    }
} else {
    // Set to a default or idle sprite when not moving
    if (is_flying) {
        sprite_index = flying_sprite; // Default flying sprite when idle
    } else {
        sprite_index = normal_sprite; // Normal sprite when idle
    }
}

// Collisions
if (!is_flying) {
    // Normal movement with collisions
    if (place_meeting(x + xspd, y, OBJ_WALL)) { 
        xspd = 0; // Stop movement on x collision
    }
    if (place_meeting(x, y + yspd, OBJ_WALL)) {
        yspd = 0; // Stop movement on y collision
    }
    // Update position if not flying
    x += xspd;
    y += yspd;
} else {
    // If flying, move freely without collision checks
    x += xspd; // Allow horizontal movement
    y += yspd; // Allow vertical movement
}




//IMPORTANT! THIS IS A TEST CODE SO VARIABLES AND SPRITES AND OTHER ASSET NAMES ARE DIFFERENT HERE SO MAKE SURE YOURS MATCH AND HAVE CORRESPONDING VARIABLES. 
